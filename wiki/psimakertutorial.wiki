=PSI XML Maker tutorial: how to create your PSI file=

The purpose of this tutorial is to is to lead you step by step through the creation of a the PSI XML file describing protein interactions according to the PSI format.

 # ==Open a schema==
   The first thing to do is to load the PSI schema. This file is called MIF.xsd and is available at the PSI web page. You can also find it in the directory called data. Once the schema is loaded, the root node should be displayed in the main frame. It is named entrySet and is colored in red, indicating that something is missing (that's not a surprise, since do not have done any mapping yet).

 # ==Set defaults values==
  * Set your prefix
      By pressing the button set your prefix, you can enter a prefix value that describes your institute (e.g. EBI, MINT...). This value will be used later if you want the application to generate automatically some values, usually used as ids.
  * Associate first fields to default values:
     We click for the first time on the node entrySet. This node is now extended and contains two attributes (level and version), and an element named entry.
     After the name of this element we can read max: unbounded; it means that there is no limitation in the number of elements contained in an entrySet. In our case, we just need one that will contain all our data.
     We can already give a default value to the attributes level and version. After selecting the node level by clicking on it, we set the radio button association to default value, and press the button Associate . A window is opened where we can enter the value for this field (in our case it should be 1). We can do it again for the attribute version (with the value 1).
     Now we are ready to process.
 # ==Open a file==
   We can open the flat file that contains the description of the interaction.
    * line separator: by default, it is assumed that each line describes the data about one interaction. We can change it by specifying a line separator. For exemple it can be the double character //.
    * first line for title: if the first line of the flat file contains the titles for the columns, we have to check this box. If we do not do it, the final XML file will contain an element which data will be the titles.
 # ==Associate the file to a node==
    Now that the flat file describing the interactions is loaded, we have to tell to the application to what node the file has to be mapped. The flat file describes a list of interactions (an interaction on each line) so we can map it to the element interactionList (entrySet, entry, interactionList). In order to do it we select the node interactionList, select the radio button association to flat file and click on Associate.
    Once the file associated to a node, the tab that displays this file takes the name of the node associated (interactionList).
 # ==Choose the separator (for the flat file)==
    By default, no separator is selected, so a whole line of the flat file is displayed in a cell from the list. So we can click on choose the separator and type the one we want to use. For example if the separator is |, we can write \| (see the documentation for more about the regular expressions), if the separator is ; we write ; and if it can be ; , or : we write ;|,|:. The line has now been splited and each field is displayed in a cell.
 # ==Map columns to elements==
    It is now time to do the mapping beetween the flat file and the schema. I will just give some examples of what can be done.
     * short label: if the first field/cell contains a label for the interaction, we select the cell, select the node shortLabel (click on interaction to expand this node, then on names, and on shortLabel), we choose the radio button association to field and click on associate. The node shortLabel is now displayed in black; it means that the node has been mapped. If an error message is displayed, it probably means that we have forgotten to associate the flat file to a node.
     * Interactors: there are two ways to add interactors to the interaction, the normalize one, and the unnormalized one.
          * unnormalize: an interaction contains the whole description of its components, including the description of the proteins. So we can click on proteinParticipant. As it is expanded, we can see a node named (proteinInteractorRef|proteinInteractor). It means that we have to choose between proteinInteractorRef or proteinInteractor. As we want an unnormalized file, we click on it and choose proteinInteractor. The element proteinInteractor is expanded and we can do the mapping of the protein.
          * normalize: an interaction contains only a reference to its interactors. The whole description of those interactors is contained in the interactorList of the element entry, and should be mapped from another file. We choose proteinInteractorRef, and do the mapping to the attribute ref and the field that contains the reference to an interactor.
     The minimum amount of interactors necessary is two, so by default two proteinInteractor are displayed. If some interactions involve more than two proteins, we can select the node proteinInteractor and click on duplicate. A new node proteinInteractor will be created. This operation can be repeated as long as the maximum number of this element is not reached (as the number of proteinInterator is unbounded, we can do it as many time as we want).
          * PSI attributes: mapping with a node that is not found in PSI, for example we have a field named username that contains the name of the user who has added the interaction. So we have to add a new attribute in the attributeList: click on interaction, attributeList, attribute. The name of this new attribute is username so we select the node, select the radio button association to default value and click on associate. When requested, we enter the string username. Now we can select the cell containing the username, the node named attribute, the radio button association to a field and click on associate.
          * splitting a cell: we want to fill the element positionInterval in the feature location of the proteinParticipant (interaction, participantList, featureList, location, choice of positionInterval). This element contains two attributes begin and end, but in our flat file we only have a field that contains this value formated as begin-end. We can manage it by splitting the cell: we click ont the button see next line until such a cell is displayed (because it is not possible with the title), we select this cell and click on split cell. A new list is displayed, which contains only one cell filled with the data from the cell that had been selected. As we have done for the main list, we choose a separator: -, and the list is now a list of two cells. We can do the mapping between the first cell and the node begin, the second one and the node end , and click on back to parent list to return to the main list. The same process could have been done to a cell of the sublist. The same mapping is kept for each line of the flat file.
 # ==Other files==
     We can do it again with other flat files. If we choosed to do a mapping of normalized interactions, we are supposed to map another flat file to the interactorList. In that case we click on add tab, a new tab is created that can be selected by clicking on it (it doesn't have any name at this time as we do not have associated it to a node, whereas the first one is called interactionList, as the node it is associated to). Once selected, we can choose a file, associate it to the node interactorList, and continue with the choice of a separator and the mapping as we have done with the interactions.
    The same process can be repeated, for example for a list of experiments.
 # ==Checkings:==
    Once all the mappings done, there should not be anymore red elements, it means that the minimum mapping is done. At any moment we can click on check and a new window will display all errors or warnings found. We can also select a node and click on about the node to have some information about it, or select a node and click on preview, a window will display the XML code that would be generated for this node if data is taken in the lines currently displayed from the flat file.
 # ==Print==
    It is almost over, it remains to click on print and choose the name of the file to print, and the name of the file where will be printed errors and warning messages.